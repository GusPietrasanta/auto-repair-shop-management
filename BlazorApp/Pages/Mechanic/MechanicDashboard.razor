@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppointmentDataService AppointmentData
@inject IMessageDataService MessageData
@inject NavigationManager NavigationManager

<div class="row">

	<div class="col-md-6">
		
		<EditForm OnValidSubmit="HandleMessageValidSubmit" Model="_message">
			<DataAnnotationsValidator/>

			<div class="form-group text-center">
				<h2>Post a Message</h2>
				<div>
					<InputTextArea class="form-control" @bind-Value="_message.Content" cols="50" rows="8"/>
				</div>
				<br/>
				<div>
					<InputSelect class="form-select" @bind-Value="_message.Tag">
						<option value="">Select a tag for the message...</option>
						<option value="Safety">Safety</option>
						<option value="Schedule">Schedule</option>
						<option value="Inventory">Inventory</option>
						<option value="Equipment">Equipment</option>
					</InputSelect>
					
					<ValidationSummary/>

				</div>
				<div>
					<button type="submit" class="m-2 btn btn-primary">Send</button>
				</div>
			</div>
		</EditForm>

	</div>

	<div class="col-md-6">

		<br/>
		<div class="text-center">
			<h2>You have @_jobsAssigned jobs assigned for today.</h2>
			<br />
			<button class="btn btn-primary" @onclick="(GoToJobs)">Go to Jobs Page</button>
		</div>

	</div>

</div>

@code {
	private int _jobsAssigned;
	private string _userName;
	private UIMessageModel _message = new();

	protected override async Task OnInitializedAsync()
	{
		var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authState.User;
		_userName = user.Identity!.Name;

		_jobsAssigned = await AppointmentData.GetTodayAppointmentsCountByUserName(_userName);
	}

	private void GoToJobs()
	{
		NavigationManager.NavigateTo("/Jobs");
	}

	private async void HandleMessageValidSubmit()
	{
		_message.UserName = _userName;
		_message.PostedOn = DateTime.Now;

		await MessageData.CreateMessage(_message);

		_message.Tag = "";
		_message.Content = "";
		_message = new UIMessageModel();

		StateHasChanged();
	}
}
