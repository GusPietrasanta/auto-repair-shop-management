@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppointmentDataService appointmentData
@inject IMessageDataService messageData
@inject NavigationManager NavigationManager

<div class="row">

	<div class="col-md-6">
		
		<EditForm OnValidSubmit="HandleMessageValidSubmit" Model="message">
			<div class="text-center">
				<h2>Post a Message</h2>
				<div>
					<InputTextArea @bind-Value="message.Content" cols="50" rows="8"/>
				</div>
				<br />
				<div>
				<InputSelect @bind-Value="message.Tag">
					<option value="">Select a tag for the message...</option>
					<option value="Safety">Safety</option>
					<option value="Schedule">Schedule</option>
					<option value="Inventory">Inventory</option>
					<option value="Equipment">Equipment</option>
				</InputSelect>
				</div>
				<br />
				<div>
					<button type="submit" class="btn btn-primary">Send</button>
				</div>
			</div>
		</EditForm>

	</div>

	<div class="col-md-6">

		<br/>
		<div class="text-center">
			<h2>You have @jobsAssigned jobs assigned for today.</h2>
			<br />
			<button class="btn btn-primary" @onclick="(() => GoToJobs())">Go to Jobs Page</button>
		</div>

	</div>

</div>

@code {
	private int jobsAssigned;
	private string userName;
	private IMessageModel message = new UIMessageModel();

	protected async override Task OnInitializedAsync()
	{
		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		userName = user.Identity.Name;

		jobsAssigned = await appointmentData.GetTodayAppointmentsCountByUserName(userName);
	}

	private void GoToJobs()
	{
		NavigationManager.NavigateTo("/Jobs");
	}

	private async void HandleMessageValidSubmit()
	{
		message.UserName = userName;
		message.PostedOn = DateTime.Now;

		await messageData.CreateMessage(message);

		message.Tag = "";
		message.Content = "";
		message = new UIMessageModel();

		StateHasChanged();
	}
}
