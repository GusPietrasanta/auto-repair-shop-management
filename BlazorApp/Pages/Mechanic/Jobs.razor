@page "/Jobs"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppointmentDataService AppointmentData
@inject IMechanicSessionData MechanicSession
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Mechanic")]

<PageTitle>Assigned Jobs</PageTitle>

<h1 class="text-center">View Assigned Job Cards</h1>

<div class="row justify-content-center">
	<div class="col-6">

		@if (MechanicSession.GetAppointmentToWorkOn() != null)
		{
			<div class="alert alert-success text-center" role="alert">
				<h3>Inspection Report for vehicle <b>@MechanicSession.GetAppointmentToWorkOn().NumberPlate</b> successfully submitted!</h3>
			</div>
		}

		@if (_appointments == null)
		{
			<p>Loading appointments...</p>
		}
		else if (_appointments.Count == 0)
		{
			<div class="alert alert-success text-center" role="alert">
            	<h3>All done for today!</h3>
            </div>
		}
		else
		{
			@foreach (var a in _appointments)
			{
				<div class="alert alert-info text-center">
					@*<p>Report ID: @r.ID</p>*@
					<p>
						Appointment ID: @a.ID <br>
						Date: @a.Date.ToShortDateString() <br>
						Customer: @a.FirstName @a.LastName <br>
						Vehicle: @a.NumberPlate <br>
						@a.Make - @a.Model <br>
					</p>
					<button class="btn btn-success" @onclick="(() => GoToReportForm(a))">Start Job</button>
				</div>
			}
		}

	</div>
</div>


@code {
	private List<IDetailedAppointment> _appointments;
	private string _userName;

	protected override async Task OnInitializedAsync()
	{
		var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authState.User;
		_userName = user.Identity!.Name;

		_appointments = await AppointmentData.ReadAllAppointmentsDetailedByUserName(_userName);
	}

	private void GoToReportForm(IDetailedAppointment appointmentDetails)
	{
		MechanicSession.SetAppointmentToWorkOn(appointmentDetails);
		NavigationManager.NavigateTo("/ReportForm");
	}
}