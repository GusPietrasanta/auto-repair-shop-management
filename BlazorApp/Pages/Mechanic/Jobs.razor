@page "/Jobs"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppointmentDataService appointmentData
@inject IMechanicSessionData mechanicSession
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Mechanic")]

<h2>View Assigned Job Cards</h2>

@if (mechanicSession.GetAppointmentToWorkOn() != null)
{
	<h3>Inspection Report for vehicle @mechanicSession.GetAppointmentToWorkOn().NumberPlate successfully submitted!</h3>
}

@if (appointments == null)
{
	<p>Loading appointments...</p>
}
else
{
	@foreach (var a in appointments)
	{
		<div class="details @(@a.MechanicID > 0 ? "alert-success" : "alert-warning")">
			Appointment ID: @a.ID
			<br />
			Date: @a.Date.ToShortDateString()
			<br />
			Customer: @a.FirstName @a.LastName
			<br />
			Vehicle: @a.NumberPlate<br />
			@a.Make - @a.Model<br />

			<button @onclick="(() => GoToReportForm(a))">Start Job</button>
		</div>
		<br />
	}
}


@code {
	private List<IDetailedAppointment> appointments;
	private string userName;

	protected async override Task OnInitializedAsync()
	{
		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		userName = user.Identity.Name;

		appointments = await appointmentData.ReadAllAppointmentsDetailedByUserName(userName);
	}

	private void GoToReportForm(IDetailedAppointment appointmentDetails)
	{
		mechanicSession.SetAppointmentToWorkOn(appointmentDetails);
		NavigationManager.NavigateTo("/ReportForm");
	}
}