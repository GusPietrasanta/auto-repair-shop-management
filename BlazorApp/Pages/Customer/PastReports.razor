@page "/PastReports"


@if (searchDetails.NumberPlate != null && reports != null)
{
	@if (reports.Count > 0)
	{
		<PageTitle>Reports for @searchNumberPlate</PageTitle>
	}
	else
	{
		<PageTitle>Past Reports</PageTitle>
	}
}
else
{
	<PageTitle>Past Reports</PageTitle>
}


@inject NavigationManager NavigationManager
@inject IReportDataService reportData
@inject ICustomerSessionData sessionData

<div class="row justify-content-center">

	<h2 class="display-3 text-center">Search Past Reports</h2>

	<div class="col-md-6">

		<div class="container text-center">
			<EditForm Model="searchDetails" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator/>
				<ValidationSummary/>

				<div class="mb-3">
					<label>Last Name:</label>
					<InputText @bind-Value="searchDetails.LastName" class="mx-auto form-control w-50" />
				</div>

				<div class="mb-3">
					<label>Number Plate:</label>
					<InputText @bind-Value="searchDetails.NumberPlate" class="mx-auto form-control w-50" />
				</div>

				<button class="btn btn-primary" type="submit">Search</button>

			</EditForm>
		</div>

@if (wasSearchButtonClicked)
{
	@if (reports != null)
	{
		<hr>
		@if (reports.Count == 0)
		{
			<div class="alert alert-warning text-center" role="alert">
				<h3>No reports were found with the provided details.</h3>
				<h3>Please try again.</h3>
			</div>
		}
		else
		{

			<div>
						<h3 class="display-6 text-center">Reports found for vehicle @searchNumberPlate</h3>

				@foreach (var r in reports)
				{				
					@if (r != reports.FirstOrDefault())
					{
						int kmsBetweenServices = previousReportOdometer - r.Odometer;
						int daysBetweenServices = (previousReportDate - r.TimeStarted).Days;
						<div class="alert alert-info text-center">
							<p class="lead">Kms between services: @kmsBetweenServices.ToString("N0") kms.</p>
							<p class="lead">Days between services: @daysBetweenServices days.</p>
						</div>
					}

					<div class="alert alert-success text-center">
						@*<p>Report ID: @r.ID</p>*@
						<p class="lead">Date: @r.TimeStarted.ToShortDateString() | Odometer: @r.Odometer kms</p>
						<button class="btn btn-primary" @onclick="(() => GoToReport(r))">View Report</button>
					</div>

					previousReportDate = r.TimeStarted;
					previousReportOdometer = r.Odometer;
				}
			</div>
		}
	}
}

	</div>
</div>


@code {
	private ISearchReporstByLastNameAndRego searchDetails = new UISearchReporstByLastNameAndRego();
	private List<IFullReportModel> reports;
	private bool wasSearchButtonClicked = false;
	private string searchNumberPlate = "";

	private DateTime previousReportDate;
	private int previousReportOdometer;

	protected override void OnInitialized()
	{
		if (sessionData.GetReports() != null)
		{
			reports = sessionData.GetReports();
			wasSearchButtonClicked = sessionData.GetSearchButtonClicked();
			searchDetails = sessionData.GetSearchDetails();
		}
	}

	private async Task HandleValidSubmit()
	{
		searchDetails.LastName = searchDetails.LastName.Trim();
		searchDetails.LastName = searchDetails.LastName.Substring(0, 1).ToUpper() + searchDetails.LastName.Substring(1).ToLower();

		searchDetails.NumberPlate = searchDetails.NumberPlate.Trim();
		searchDetails.NumberPlate = Regex.Replace(searchDetails.NumberPlate, "[^a-zA-Z0-9]", String.Empty).ToUpper();

		reports = await reportData.SearchReports(searchDetails);

		sessionData.SetReports(reports);
		sessionData.SetSearchButtonClickedToTrue();
		sessionData.SetSearchDetails(searchDetails);

		searchNumberPlate = searchDetails.NumberPlate;

		wasSearchButtonClicked = true;
	}

	private void GoToReport(IFullReportModel reportToSee)
	{
		sessionData.SetReport(reportToSee);
		NavigationManager.NavigateTo("/WatchReport");
	}
}
