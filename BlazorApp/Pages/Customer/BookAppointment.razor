@page "/BookAppointment"
@inject IAPICalls apiCalls
@inject ICustomerDataService customerData
@inject IVehicleDataService vehicleData
@inject IAppointmentDataService appointmentData
@inject ICustomerSessionData sessionData
@inject NavigationManager NavigationManager

<h3>Book An Appointment</h3>

<div class="row">
	<div class="col-md-6">
		<EditForm Model="@newAppointment" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

			<div class="mb-3">
				<label>First Name:</label>
				<InputText @bind-Value="newAppointment.FirstName" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Last Name:</label>
				<InputText @bind-Value="newAppointment.LastName" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Email:</label>
				<InputText @bind-Value="newAppointment.Email" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Phone Number:</label>
				<InputText @bind-Value="newAppointment.PhoneNumber" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Address:</label>
				<InputText @bind-Value="newAppointment.Address" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Vehicle Plate Number (Rego):</label>
				<InputText @bind-Value="newAppointment.NumberPlate" @onfocusout="RetrieveVehicleData" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Date:</label>
				<InputDate @bind-Value="newAppointment.Date" class="form-control"/>
			</div>

			<button class="btn btn-primary" type="submit">Book An Appointment!</button>
		</EditForm>
	</div>


	<div class="col-md-6">

		@if (newVehicle != null)
		{
			<h1>Vehicle Details:</h1>
			<h2>Rego: @newVehicle.NumberPlate</h2>
			<h2>Make: @newVehicle.Make</h2>
			<h2>Model: @newVehicle.Model</h2>
			<h2>Year: @newVehicle.Year</h2>
			<h3>VIN: @newVehicle.VIN</h3>
			<h3>Engine: @newVehicle.EngineDescription</h3>
			<h3>Body: @newVehicle.BodyType</h3>
			<h3>Transmission: @newVehicle.TransmissionType</h3>
			<h3>Fuel: @newVehicle.FuelType</h3>
		}
		@if (apiErrorMessage != "")
		{
			<h1>@apiErrorMessage</h1>
		}

	</div>
</div>

@code {
	private UIAppointmentFormModel newAppointment = new();
	private IVehicleModel newVehicle = null;
	private ICustomerModel newCustomer = null;
	private int customerID;
	private int vehicleID;
	private int appointmentID;

	private string apiErrorMessage = "";

	private void RetrieveVehicleData()
	{
		apiErrorMessage = "";

		// Sanitise input
		newAppointment.NumberPlate = Regex.Replace(newAppointment.NumberPlate, "[^a-zA-Z0-9]", String.Empty).ToUpper();

		try
		{
			newVehicle = apiCalls.GetVehicleDetails(newAppointment.NumberPlate);
		}
		catch (Exception e)
		{
			newVehicle = null;
			Console.WriteLine(e);
			apiErrorMessage = "Vehicle Not Found";
		}
	}

	private async void HandleValidSubmit()
	{
		newCustomer = new CustomerModel();

		newCustomer.FirstName = newAppointment.FirstName;
		newCustomer.LastName = newAppointment.LastName;
		newCustomer.PhoneNumber = newAppointment.PhoneNumber;
		newCustomer.Email = newAppointment.Email;
		newCustomer.Address = newAppointment.Address;

		customerID = await customerData.CreateCustomer(newCustomer);
		newVehicle.CustomerID = customerID;
		vehicleID = await vehicleData.CreateVehicle(newVehicle);

		IAppointmentModel appointmentToDB = new AppointmentModel();
		appointmentToDB.CustomerID = customerID;
		appointmentToDB.VehicleID = vehicleID;
		appointmentToDB.Date = newAppointment.Date;

		appointmentID = await appointmentData.CreateAppointment(appointmentToDB);

		sessionData.SetAppointmentID(appointmentID);

		NavigationManager.NavigateTo("/AppointmentSuccessful");
	}
}
