@page "/BookAppointment"
@inject IAPICalls apiCalls
@inject ICustomerDataService customerData
@inject IVehicleDataService vehicleData
@inject IAppointmentDataService appointmentData
@inject ICustomerSessionData sessionData
@inject NavigationManager NavigationManager

<div class="text-center">
	<h2 class="display-3">Book An Appointment With Us!</h2>
</div>


<div class="row mt-4 justify-content-between">
	<div class="col-md-6 p-4 bg-info-subtle rounded-4">
		<EditForm Model="@newAppointment" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.FirstName" id="firstName" placeholder="First Name" class="form-control" />
				<label for="firstName" class="form-label">First Name</label>
			</div>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.LastName" id="lastName" placeholder="Last Name" class="form-control" />
				<label for="lastName" class="form-label">Last Name</label>
			</div>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.Email" id="email" placeholder="Email" class="form-control" />
				<label for="email" class="form-label">Email</label>
			</div>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.PhoneNumber" id="phoneNumber" placeholder="Phone Number" class="form-control" />
				<label for="phoneNumber" class="form-label">Phone Number</label>
			</div>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.Address" id="address" placeholder="Address" class="form-control" />
				<label for="address" class="form-label">Address</label>
			</div>

			<div class="mb-3 form-floating">
				<InputText @bind-Value="newAppointment.NumberPlate" @onfocusout="RetrieveVehicleData" id="numberPlate" placeholder="Vehicle Number Plate" class="form-control" />
				<label for="numberPlate" class="form-label">Vehicle Number Plate</label>
			</div>

			<div class="mb-3 form-floating">
				<InputDate @bind-Value="newAppointment.Date" id="date" placeholder="Date" class="form-control" />
				<label for="date" class="form-label">Date</label>
			</div>

			<div class="text-center">
				<button class="btn btn-primary" type="submit">Book An Appointment!</button>
			</div>
			

		</EditForm>
	</div>


	

		@if (newVehicle != null)
		{
			<div class="col-md-6 p-4 rounded-4">

				<table class="table table-striped table-hover">
					<thead>
						<tr>
							<th colspan="2" class="display-5 text-center">Vehicle Details</th>
						</tr>
					</thead>
					<tbody>
					<tr>
						<td class="h4 fw-bold">Number Plate:</td>
						<td class="h4">@newVehicle.NumberPlate</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Make:</td>
						<td class="h4">@newVehicle.Make</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Model:</td>
						<td class="h4">@newVehicle.Model</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Year:</td>
						<td class="h4">@newVehicle.Year</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">VIN:</td>
						<td class="h4">@newVehicle.VIN</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Engine:</td>
						<td class="h4">@newVehicle.EngineDescription</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Body:</td>
						<td class="h4">@newVehicle.BodyType</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Transmission:</td>
						<td class="h4">@newVehicle.TransmissionType</td>
					</tr>
					<tr>
						<td class="h4 fw-bold">Fuel:</td>
						<td class="h4">@newVehicle.FuelType</td>
					</tr>
					</tbody>
				</table>
			</div>
		}
		else if (apiErrorMessage != "")
		{
		<div class="col-md-6 p-4 bg-alert-subtle rounded-4 text-center">
			<div class="alert alert-danger" role="alert">
				@apiErrorMessage
			</div>
		</div>
		}

	
</div>

@code {
	private UIAppointmentFormModel newAppointment = new();
	private IVehicleModel newVehicle = null;
	private ICustomerModel newCustomer = null;
	private int customerID;
	private int vehicleID;
	private int appointmentID;

	private string apiErrorMessage = "";

	private void RetrieveVehicleData()
	{
		if (newAppointment.NumberPlate != null)
		{
			apiErrorMessage = "";

			newAppointment.NumberPlate = Regex.Replace(newAppointment.NumberPlate, "[^a-zA-Z0-9]", String.Empty).ToUpper();

			try
			{
				newVehicle = apiCalls.GetVehicleDetails(newAppointment.NumberPlate);
			}
			catch (Exception e)
			{
				newVehicle = null;
				Console.WriteLine(e);
				apiErrorMessage = "Vehicle Not Found";
			}
		}
	}

	private async void HandleValidSubmit()
	{
		newCustomer = new CustomerModel();

		newCustomer.FirstName = newAppointment.FirstName.Substring(0, 1).ToUpper() + newAppointment.FirstName.Substring(1).ToLower();
		newCustomer.LastName = newAppointment.LastName.Substring(0, 1).ToUpper() + newAppointment.LastName.Substring(1).ToLower();

		newCustomer.PhoneNumber = newAppointment.PhoneNumber;
		newCustomer.Email = newAppointment.Email;
		newCustomer.Address = newAppointment.Address;

		customerID = await customerData.CreateCustomer(newCustomer);
		newVehicle.CustomerID = customerID;
		vehicleID = await vehicleData.CreateVehicle(newVehicle);

		IAppointmentModel appointmentToDB = new AppointmentModel();
		appointmentToDB.CustomerID = customerID;
		appointmentToDB.VehicleID = vehicleID;
		appointmentToDB.Date = newAppointment.Date;

		appointmentID = await appointmentData.CreateAppointment(appointmentToDB);

		sessionData.SetAppointmentID(appointmentID);
		sessionData.SetAppointmentDateTime(appointmentToDB.Date);
		sessionData.SetAppointmentNumberPlate(newVehicle.NumberPlate);

		NavigationManager.NavigateTo("/AppointmentSuccessful");
	}
}
