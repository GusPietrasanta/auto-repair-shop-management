@attribute [Authorize(Roles="Manager")]
@page "/StockItem/{itemID:int}"
<PageTitle>Inventory Stock</PageTitle>
@inject IStockDataService StockData
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession
@inject IJSRuntime JSRuntime



@if	(_item != null)
{
	<div class="text-center">
		<h1 class="display-4 fw-normal">Stock Item: @_item.ItemName</h1>
		<button class="btn btn-outline-info btn-lg" @onclick="(PreviousPage)">Go to previous page</button>
	</div>
	
	<hr/>
	
	<PageTitle>Inventory - @_item.ItemName</PageTitle>
	
	<div class="row justify-content-around">

	<div class="col-4">
			<div>
				<h3><b>@_item.ItemName</b></h3>
			</div>
			<br />
			<div>

			<h3>
			Status:
			@if (_item.Quantity == 0)
			{
			<span class="badge bg-danger">Out of Stock</span>
			}
			else if (_item.Quantity > _item.AlarmMinimum)
			{
					<span class="badge bg-success">Ok</span>
				}
			else if (_item.Quantity <= _item.AlarmMinimum)
			{
					<span class="badge bg-warning">Low</span>
			}
				</h3>
			</div>
			<br/>
			@if(_item.Unit.ToLower().Contains("unit"))
			{
				<div><h4>In Stock: @_item.Quantity.ToString("0") @_item.Unit</h4></div>
				<br />
				<div><h4>Alarm minimum: @_item.AlarmMinimum.ToString("0") @_item.Unit</h4></div>
			}
			else
			{
				<div><h4>In Stock: @_item.Quantity.ToString("0.00") @_item.Unit</h4></div>
				<br />
				<div><h4>Alarm minimum: @_item.AlarmMinimum.ToString("0.00") @_item.Unit</h4></div>
			}



	</div>	
	
	<div class="col-4 alert alert-info">
		<h5>Update Stock:</h5>
		<div class="row g-4 align-items-center">
			<div class="col-auto">
				<button class="btn btn-success" @onclick="(() => Add())">+</button>				
			</div>
			<div class="col-auto">
				<InputNumber class="form-control" @bind-Value="_amount"/>	
			</div>
			<div class="col-auto">
				<button class="btn btn-danger" @onclick="(() => Subtract())">-</button>	
			</div>
			
		</div>
		<br/>
		<br/>
		<div>
			<h5>Modify Minimum Alarm Quantity:</h5>
			<InputNumber class="form-control"  @bind-Value="_item.AlarmMinimum"/>
			<button class="btn btn-outline-primary mt-2" @onclick="(() => Save())">Set New Value</button>
		</div>

		<br />

		<form>
			<fieldset disabled="@_isFormDisabled">

					<div class="form-group">
						<label>Edit Name:</label>
						<InputText @bind-Value="_item.ItemName" class="form-control" />

					</div>

					<br />

					<div class="form-group">
						<label>Edit Unit of Measurement:</label>
						<InputText @bind-Value="_item.Unit" class="form-control" />
					</div>

					<br/>


			</fieldset>
		</form>
			<button class="btn btn-primary" @onclick="(() => ToggleEdit())">Edit</button>

			@if (_isFormDisabled == false)
			{
				<button class="btn btn-success ms-2" type="submit" @onclick="(() => Save())">Save</button>
				<button class="btn btn-danger" type="submit" @onclick="(() => Delete())">Delete</button>
			}
	</div>

	</div>
}


<button class="btn btn-info" @onclick="(() => PreviousPage())">Go to previous page</button>

@code {
	[Parameter]
	public int itemID { get; set; }

	private bool _isFormDisabled = true;
	private decimal _amount;
	private IStockItemModel _item;

	private void PreviousPage()
	{
		NavigationManager.NavigateTo(ManagerSession.GetLastPage());
	}

	protected override async Task OnParametersSetAsync()
	{
		_item = await StockData.GetStockItemByID(itemID);
	}

	private void ToggleEdit()
	{
		_isFormDisabled = !_isFormDisabled;
	}

	private async Task Save()
	{
		await StockData.UpdateItemByID(_item);
		_isFormDisabled = true;
	}

	private async Task Add()
	{
		_item.Quantity += _amount;
		_amount = 0;
		await Save();
	}	

	private async Task Delete()
	{
		await StockData.DeleteItemByID(_item.ID);

		ManagerSession.SetLastPage(NavigationManager.Uri);

		NavigationManager.NavigateTo("/Inventory");

	}

	private async Task Subtract()
	{
		if ((_item.Quantity - _amount) < 0)
		{
			await JSRuntime.InvokeVoidAsync("alert", "ERROR: Quantity would be negative. Please enter a valid value to update stock.");
		}
		else
		{
			_item.Quantity -= _amount;
			_amount = 0;
			await Save();
		}
	}
}
