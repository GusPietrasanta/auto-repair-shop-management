@attribute [Authorize(Roles = "Manager")]
@page "/Vehicle/{vehicleID:int}"
@inject IVehicleDataService VehicleData
@inject IReportDataService ReportData
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession

<h3>Vehicle</h3>
<button class="btn btn-info" @onclick="(() => PreviousPage())">Go to previous page</button>

<div class="row">

		@if (_vehicle != null)
		{
		<div class="col-md-6">
		<form>
			<fieldset disabled="@_isFormDisabled">

		<EditForm Model="@_vehicle" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

				<div class="form-group">
					<label>Vehicle ID:</label>
					<span>@_vehicle.ID</span>
				</div>

				<div class="form-group">
					<label>Number Plate:</label>
					<InputText @bind-Value="_vehicle.NumberPlate" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Make:</label>
					<InputText @bind-Value="_vehicle.Make" class="form-control" />
				</div>

				<div class="form-group">
					<label>Model:</label>
					<InputText @bind-Value="_vehicle.Model" class="form-control" />
				</div>

				<div class="form-group">
					<label>Year:</label>
					<InputText @bind-Value="_vehicle.Year" class="form-control" />
				</div>

				<div class="form-group">
					<label>VIN:</label>
					<InputText @bind-Value="_vehicle.VIN" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Engine:</label>
					<InputText @bind-Value="_vehicle.EngineDescription" class="form-control" />
				</div>

				<div class="form-group">
					<label>Transmission:</label>
					<InputText @bind-Value="_vehicle.TransmissionType" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Engine Size:</label>
					<InputText @bind-Value="_vehicle.SizeLitres" class="form-control" />
				</div>

				<div class="form-group">
					<label>Cylinders:</label>
					<InputText @bind-Value="_vehicle.Cylinders" class="form-control" />
				</div>

				<div class="form-group">
					<label>Fuel Type:</label>
					<InputText @bind-Value="_vehicle.FuelType" class="form-control" />
				</div>

				<div class="form-group">
					<label>Body Type:</label>
					<InputText @bind-Value="_vehicle.BodyType" class="form-control" />
				</div>

				<div class="form-group">
				<label>First Visit:</label>
				@if (_vehicle.FirstVisit.ToShortDateString() == "1/01/0001")
				{
				<p>Has never been at the shop yet.</p>
				}
				else
				{

				<InputDate @bind-Value="_vehicle.FirstVisit" class="form-control" />
				
				}
				</div>

		</EditForm>

				</fieldset>
			</form>

			<br/>

		<button class="btn btn-primary" @onclick="(() => ToggleEdit())">Edit</button>
		
		@if (_isFormDisabled == false)	
		{
				<button class="btn btn-success" type="submit" @onclick="(() => HandleValidSubmit())">Save</button>
		}
	
		</div>
		}

	<div class="col-md-6">

		@if (_reports != null)
		{
			<h2>Reports: </h2>
			@foreach (var r in _reports)
			{
				@if (r != _reports.FirstOrDefault())
				{
					int kmsBetweenServices = _previousReportOdometer - r.Odometer;
					int daysBetweenServices = (_previousReportDate - r.TimeStarted).Days;
					<div>
						<p>Kms between services: @kmsBetweenServices.ToString("N0") kms.</p>
						<p>Days between services: @daysBetweenServices days.</p>
					</div>
				}

				@if (r != null)
				{
					<div class="alert-info">
						<p>Report ID: @r.ID</p>
						<p>Date: @r.TimeStarted.ToShortDateString()</p>
						<p>Odometer: @r.Odometer kms</p>
						<button class="btn btn-primary" @onclick="(() => SeeReport(r.ID))">See Report</button>
					</div>
					<br />

					_previousReportDate = r.TimeStarted;
					_previousReportOdometer = r.Odometer;
				}
			}
		}

	</div>

</div>

<button class="btn btn-info" @onclick="(() => PreviousPage())">Go to previous page</button>

@code {
	private bool _isFormDisabled = true;

	[Parameter]
	public int VehicleId { get; set; }

	private IVehicleModel _vehicle;
	private List<IReportModel> _reports;

	private DateTime _previousReportDate;
	private int _previousReportOdometer;

	private void ToggleEdit()
	{
		_isFormDisabled = !_isFormDisabled;
	}

	private void HandleValidSubmit()
	{
		VehicleData.UpdateVehicle(_vehicle);
		_isFormDisabled = true;
	}

	protected async override Task OnInitializedAsync()
	{
		_vehicle = await VehicleData.GetVehicleDetailsByID(VehicleId);
		_reports = await ReportData.GetReportsByVehicleID(VehicleId);
	}

	protected async override Task OnParametersSetAsync()
	{
		_vehicle = await VehicleData.GetVehicleDetailsByID(VehicleId);
		_reports = await ReportData.GetReportsByVehicleID(VehicleId);
	}

	private void PreviousPage()
	{
		NavigationManager.NavigateTo(ManagerSession.GetLastPage());
	}

	private void SeeReport(int reportID)
	{
		ManagerSession.SetLastPage(NavigationManager.Uri);
		//managerSession.SetLastPage($"/Vehicle/{vehicleID}");
		NavigationManager.NavigateTo($"/Report/{reportID}");
	}
}
