@attribute [Authorize(Roles = "Manager")]
@page "/Vehicle/{vehicleID:int}"
@inject IVehicleDataService vehicleData
@inject IReportDataService reportData
@inject ICustomerDataService customerData
@inject NavigationManager NavigationManager
@inject IManagerSessionData managerSession

<h3>Vehicle</h3>
<button class="btn btn-info" @onclick="(() => previousPage())">Go to previous page</button>

<div class="row">

		@if (vehicle != null)
		{
		<div class="col-md-6">
		<form>
			<fieldset disabled="@isFormDisabled">

		<EditForm Model="@vehicle" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

				<div class="form-group">
					<label>Vehicle ID:</label>
					<span>@vehicle.ID</span>
				</div>

				<div class="form-group">
					<label>Number Plate:</label>
					<InputText @bind-Value="vehicle.NumberPlate" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Make:</label>
					<InputText @bind-Value="vehicle.Make" class="form-control" />
				</div>

				<div class="form-group">
					<label>Model:</label>
					<InputText @bind-Value="vehicle.Model" class="form-control" />
				</div>

				<div class="form-group">
					<label>Year:</label>
					<InputText @bind-Value="vehicle.Year" class="form-control" />
				</div>

				<div class="form-group">
					<label>VIN:</label>
					<InputText @bind-Value="vehicle.VIN" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Engine:</label>
					<InputText @bind-Value="vehicle.EngineDescription" class="form-control" />
				</div>

				<div class="form-group">
					<label>Transmission:</label>
					<InputText @bind-Value="vehicle.TransmissionType" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>Engine Size:</label>
					<InputText @bind-Value="vehicle.SizeLitres" class="form-control" />
				</div>

				<div class="form-group">
					<label>Cylinders:</label>
					<InputText @bind-Value="vehicle.Cylinders" class="form-control" />
				</div>

				<div class="form-group">
					<label>Fuel Type:</label>
					<InputText @bind-Value="vehicle.FuelType" class="form-control" />
				</div>

				<div class="form-group">
					<label>Body Type:</label>
					<InputText @bind-Value="vehicle.BodyType" class="form-control" />
				</div>
				
				<div class="form-group">
					<label>First Visit:</label>
					<InputDate @bind-Value="vehicle.FirstVisit" class="form-control" />
				</div>

		</EditForm>

				</fieldset>
			</form>

			<br/>

		<button class="btn btn-primary" @onclick="(() => ToggleEdit())">Edit</button>
		
		@if (isFormDisabled == false)	
		{
				<button class="btn btn-success" type="submit" @onclick="(() => HandleValidSubmit())">Save</button>
		}
	
		</div>
		}

	<div class="col-md-6">

		@if (reports != null)
		{
			<h2>Reports: </h2>
			@foreach (var r in reports)
			{
				@if (r != reports.FirstOrDefault())
				{
					int kmsBetweenServices = previousReportOdometer - r.Odometer;
					int daysBetweenServices = (previousReportDate - r.TimeStarted).Days;
					<div>
						<p>Kms between services: @kmsBetweenServices.ToString("N0") kms.</p>
						<p>Days between services: @daysBetweenServices days.</p>
					</div>
				}

				<div class="alert-info">
					<p>Report ID: @r.ID</p>
					<p>Date: @r.TimeStarted.ToShortDateString()</p>
					<p>Odometer: @r.Odometer kms</p>
					<button class="btn btn-primary" @onclick="(() => SeeReport(r.ID))">See Report</button>
				</div>
				<br />

				previousReportDate = r.TimeStarted;
				previousReportOdometer = r.Odometer;
			}
		}

	</div>

</div>

<button class="btn btn-info" @onclick="(() => previousPage())">Go to previous page</button>

@code {
	private bool isFormDisabled = true;

	[Parameter]
	public int vehicleID { get; set; }

	private IVehicleModel vehicle;
	private List<IReportModel> reports;

	private DateTime previousReportDate;
	private int previousReportOdometer;

	private void ToggleEdit()
	{
		isFormDisabled = !isFormDisabled;
	}

	private void HandleValidSubmit()
	{
		vehicleData.UpdateVehicle(vehicle);
		isFormDisabled = true;
	}

	protected async override Task OnInitializedAsync()
	{
		vehicle = await vehicleData.GetVehicleDetailsByID(vehicleID);
		reports = await reportData.GetReportsByVehicleID(vehicleID);
	}

	private void previousPage()
	{
		NavigationManager.NavigateTo(managerSession.GetLastPage());
	}

	private void SeeReport(int reportID)
	{
		managerSession.SetLastPage($"/Vehicle/{vehicleID}");
		NavigationManager.NavigateTo($"/Report/{reportID}");
	}
}
