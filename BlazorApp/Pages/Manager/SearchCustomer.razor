@page "/SearchCustomer"
@using BlazorApp.Pages.Manager.Components
@attribute [Authorize(Roles = "Manager")]
@inject ICustomerDataService CustomerData
@inject IJSRuntime JSRuntime


<h3>Search Customers</h3>

<label>Search:
<input type="text" @oninput="HandleInput"/>
</label>
<br /><br />

@if (_filteredCustomers == null)
{
	<h4>Loading...</h4>
}
else if (_filteredCustomers.Count == 0)
{
	<h4>Customer not found.</h4>
}
else
{
	<div class="row">
		<div class="col-sm-8">
			<table class="table table-striped">
				<thead class="table-dark">
					<tr>
						<th>First Name</th>
						<th>Last Name</th>
						<th>Email</th>
						<th>Phone Number</th>
						<th>Address</th>
						<th>Vehicles</th>
						<th>Edit Info</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var c in _filteredCustomers)
					{
						<tr>
							<td>@c.FirstName</td>
							<td>@c.LastName</td>
							<td>@c.Email</td>
							<td>@c.PhoneNumber</td>
							<td>@c.Address</td>
							<td><button class ="btn btn-primary" @onclick="(() => ViewVehicles(c.ID))">View</button></td>
							<td><div class="text-center">
								<button class="btn btn-primary mb-1" @onclick="(() => EditCustomer(c.ID))">Edit</button>

								@if (_idToDelete == c.ID)
								{
										<button class="btn btn-danger p-2" @onclick="(() => ConfirmDeleteCustomer(c.ID))">Confirm</button>
								}
								else
								{
										<button class="btn btn-outline-danger p-2" @onclick="(() => DeleteCustomer(c.ID))">Delete</button>
								}
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="col-sm-4">
			@if (_showEditForm)
			{
				<UpdatePerson Customer="_customerToUpdate" OnUpdate="HandleOnUpdate"></UpdatePerson>
			}
			@if (_showVehicles)
			{
				<ShowVehiclesComponent CustomerID="@_idToShowVehicles"></ShowVehiclesComponent>
			}
		</div>
	</div>
}

@code {
	private List<ICustomerModel> _allCustomers;
	private List<ICustomerModel> _filteredCustomers;
	private bool _showEditForm;
	private bool _showVehicles;
	private int _idToDelete;
	private int _idToShowVehicles;
	private ICustomerModel _customerToUpdate;

	protected override async Task OnInitializedAsync()
	{
		_allCustomers = await CustomerData.ReadAllCustomers();
		_filteredCustomers = _allCustomers;
	}

	private void HandleInput(ChangeEventArgs args)
	{
		_showVehicles = false;
		_showEditForm = false;
		if (args.Value!.ToString()!.Length == 0)
		{
			_filteredCustomers = _allCustomers;
		}
		else
		{
			string searchTerm = args.Value!.ToString()!.ToLower();

			var filteredIEnumerable = from x in _allCustomers
											where	x.FirstName.ToLower().Contains(searchTerm) ||
													x.LastName.ToLower().Contains(searchTerm) ||
													x.Address.ToLower().Contains(searchTerm) ||
													x.PhoneNumber.Contains(searchTerm) ||
													x.Email.ToLower().Contains(searchTerm)
											select x;

			_filteredCustomers = filteredIEnumerable.ToList();
		}
	}

	private void EditCustomer(int ID)
	{
		_showVehicles = false;
		_showEditForm = true;
		_customerToUpdate = _allCustomers.Where(x => x.ID == ID).FirstOrDefault();
	}

	private void HandleOnUpdate(ICustomerModel updatedCustomer)
	{
		_showEditForm = false;

		var c = _allCustomers.First(x => x.ID == updatedCustomer.ID);

		var index = _allCustomers.IndexOf(c);

		_allCustomers[index] = updatedCustomer;		

		var fc = _filteredCustomers.First(x => x.ID == updatedCustomer.ID);

		var index2 = _filteredCustomers.IndexOf(fc);

		_filteredCustomers[index2] = updatedCustomer;
	}

	private void ViewVehicles(int ID)
	{
		_showVehicles = true;
		_showEditForm = false;
		_idToShowVehicles = ID;
	}

	private void DeleteCustomer(int ID)
	{
		_idToDelete = ID;
	}
	private async Task ConfirmDeleteCustomer(int ID)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "This will delete all the appointments and vehicles related to this customer. Are you sure?"); 

		if (confirmed)
		{
			_allCustomers.Remove(_allCustomers.Where(x => x.ID == ID).FirstOrDefault());
			_filteredCustomers.Remove(_filteredCustomers.Where(x => x.ID == ID).FirstOrDefault());
			await CustomerData.DeleteCustomerByID(ID);
		}
		else
		{
			_idToDelete = 0;
		}

	}

}
