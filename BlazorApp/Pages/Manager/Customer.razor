@attribute [Authorize(Roles="Manager")]
@page "/Customer/{customerID:int}"
@inject ICustomerDataService CustomerData
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession
@inject IVehicleDataService VehicleData

<h1>CustomerID: @CustomerId</h1>

@if(_customer != null)
{
	<div class="row">

		<div class="col-md-6">
			<form>
				<fieldset disabled="@_isFormDisabled">
					<h3>Customer Details: </h3>

						<div class="form-group">
							<label>First Name:</label>
							<InputText @bind-Value="_customer.FirstName" class="form-control" />
						</div>

						<div class="form-group">
							<label>Last Name:</label>
							<InputText @bind-Value="_customer.LastName" class="form-control" />
						</div>
						
						<div class="form-group">
							<label>Email:</label>
							<InputText @bind-Value="_customer.Email" class="form-control" />
						</div>

						<div class="form-group">
							<label>Phone Number:</label>
							<InputText @bind-Value="_customer.PhoneNumber" class="form-control" />
						</div>

						<div class="form-group">
							<label>Address:</label>
							<InputText @bind-Value="_customer.Address" class="form-control" />
						</div>


				</fieldset>
			</form>

			<br />
			<button class="btn btn-primary" @onclick="(() => ToggleEdit())">Edit</button>

			@if (_isFormDisabled == false)
			{
				<button class="btn btn-success ms-2" type="submit" @onclick="(() => HandleValidSubmit())">Save</button>
			}

		</div>



		<div class="col-md-6">
			<h3>Customer Vehicles:</h3>
			@foreach (var v in _vehicles)
				{
					<a class="fill-div" href="#">
					<div class="alert-info" @onclick="(() => GoToVehicle(v.ID))">
						<b>@v.NumberPlate</b> 
						<br />
						@v.Make @v.Model - @v.Year
					</div>
					</a>
					<br />
				}
		</div>

	</div>
}

<br/>

<button class="btn btn-info" @onclick="(() => PreviousPage())">Go to previous page</button>

@code {
	[Parameter]
	public int CustomerId { get; set; }

	private bool _isFormDisabled = true;

	private ICustomerModel _customer;
	private List<IVehicleModel> _vehicles;

	private void PreviousPage()
	{
		NavigationManager.NavigateTo(ManagerSession.GetLastPage());
	}

	protected override async Task OnInitializedAsync()
	{
		_customer = await CustomerData.ReadCustomerByID(CustomerId);
		_vehicles = await VehicleData.GetVehiclesByCustomerID(CustomerId);
	}

	private void ToggleEdit()
	{
		_isFormDisabled = !_isFormDisabled;
	}

	private async Task HandleValidSubmit()
	{
		await CustomerData.UpdateCustomer(_customer);
		_isFormDisabled = true;
	}

	private void GoToVehicle(int vehicleId)
	{
		ManagerSession.SetLastPage(NavigationManager.Uri);
		NavigationManager.NavigateTo($"/Vehicle/{vehicleId}");
	}
}
