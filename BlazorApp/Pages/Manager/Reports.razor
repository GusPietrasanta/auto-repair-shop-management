@page "/Reports"
@using DataAccessLibrary.Data.Interfaces
<PageTitle>Reports</PageTitle>
@attribute [Authorize(Roles = "Manager")]
@inject IReportDataService ReportData
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession

<div class="text-center">
	<h1 class="display-3 fw-normal">Reports</h1>
	<button class="btn btn-outline-info btn-lg" @onclick="(PreviousPage)">Go to previous page</button>
</div>

<hr/>

<div class="row justify-content-center">
	<div class="col-5">
		
		<div>
			<nav>
				<ul class="pagination justify-content-center">
					
					@if (_numberOfReports > _reportsPerPage * 3)
					{
						<li class="page-item @(_page == 1 ? "disabled" : "")" @onclick="(Previous)"><a class="page-link" href="#" @onclick:preventDefault="true">Previous</a></li>						
					}
					
					@if (_neededNumberOfPages > 1)
					{
						@for (int i = 1; i <= _neededNumberOfPages; i++)
						{
							int pageNumber = i;
							<li class="page-item @(_page == pageNumber ? "active" : "")" @onclick="() => PageNumber(pageNumber)"><a class="page-link" href="#" @onclick:preventDefault="true">@pageNumber</a></li>
						}
					}

					@if (_numberOfReports > _reportsPerPage * 3)
					{
						<li class="page-item @(_page == _neededNumberOfPages ? "disabled" : "")" @onclick="(Next)"><a class="page-link" href="#" @onclick:preventDefault="true">Next</a></li>						
					}
				</ul>
			</nav>
		</div>

		@if (_inspections != null)
		{
			@foreach (var c in _inspections)
			{
				<div class="alert alert-info text-center">
					<p class="lead">
						<b>Report ID:</b> @c.Id <br/>
						<b>Vehicle:</b> @c.NumberPlate - @c.Make @c.Model @c.Year <br/>
						<b>Customer:</b> @c.FirstName @c.LastName <br/>
						<b>Completed by:</b> @c.UserName on @c.TimeFinished.ToString("g")<br/>
					</p>
					<button class="btn btn-primary" @onclick="(() => SeeReport(c.Id))">See Report</button>
				</div>
			}
		}
		else
		{
			<p>No completed inspections.</p>
		}
	</div>
</div>


@code {
	private int _page = 1;
	private readonly int _reportsPerPage = 5;
	private int _numberOfReports;
	private int _neededNumberOfPages;
	
	private List<IDashboardReportModel> _inspections;

	protected override async Task OnInitializedAsync()
	{
		_inspections = await ReportData.GetReportsPagination(_page - 1, _reportsPerPage);

		_numberOfReports = await ReportData.GetReportsCount();
		
		_neededNumberOfPages = ((_numberOfReports - 1) / _reportsPerPage) + 1;
	}

		private void SeeReport(int reportId)
	{
		ManagerSession.SetLastPage(NavigationManager.Uri);
		NavigationManager.NavigateTo($"/Report/{reportId}");
	}	
	
	private void PreviousPage()
	{
		NavigationManager.NavigateTo(ManagerSession.GetLastPage());
	}

	private void Previous()
	{
		if (_page > 1)
		{
			_page--;
		}

		UpdateList();
	}
	
	private void Next()
	{
		if (_page < _neededNumberOfPages)
		{
			_page++;	
		}

		UpdateList();
	}

	private void PageNumber(int pageNumber)
	{
		_page = pageNumber;

		UpdateList();
	}

	private async void UpdateList()
	{
		_inspections = await ReportData.GetReportsPagination((_page - 1) * _reportsPerPage, _reportsPerPage);
		await InvokeAsync(StateHasChanged);
	}
}
