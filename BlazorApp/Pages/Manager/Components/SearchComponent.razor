@inject IVehicleDataService VehicleData
@inject ICustomerDataService CustomerData
@inject IStockDataService StockData
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession

<div class="search-bar-container">
    <div class="input-wrapper">
        <span class="oi oi-magnifying-glass"></span>
        <input class="search-bar" value="@_searchTerm" @onblur="HandleOnBlur" @oninput="HandleInput" type="text" placeholder="Search customers, vehicles or stock items..." />
    </div>
    <div class="results-list">
        @if (_vehicles != null)
        {
            @if (_vehicles.Count > 0)
            {
                <div class="search-result-separator">Vehicles</div>
            }
            
            @foreach (var v in _vehicles)
            {
                <a class="fill-div" href="#">
                <div class="search-result" @onclick="(() => GoToVehicle(v.Id))"><b>@v.NumberPlate</b> - @v.Make @v.Model</div>
                </a>
            }

        }        
        @if (_customers != null)
        {
            @if (_customers.Count > 0)
            {
                <div class="search-result-separator">Customers</div>
            }
            @foreach (var c in _customers)
            {
                <a class="fill-div" href="#">
                    <div class="search-result" @onclick="(() => GoToCustomer(c.Id))"><b>@c.FirstName @c.LastName</b></div>
                </a>
            }
        }  
        @if (_items != null)
        {
            @if (_items.Count > 0)
            {
                <div class="search-result-separator">Inventory</div>
            }
            @foreach (var i in _items)
            {
                <a class="fill-div" href="#">
                    <div class="search-result" @onclick="(() => GoToItem(i.Id))"><b>@i.ItemName</b> - @(i.Unit.ToLower().Contains("piece") || i.Unit.ToLower().Contains("set") ? @i.Quantity.ToString("0") : @i.Quantity) @i.Unit</div>
                </a>
            }
        }
    </div>
</div>

@code {
    private string _searchTerm = "";

    private List<ICustomerModel> _customers;
    private List<IVehicleModel> _vehicles;
    private List<IStockItemModel> _items;

    private async Task HandleInput(ChangeEventArgs args)
    {

        _searchTerm = args.Value!.ToString();

        if (_searchTerm!.Length > 0)
        {
            // Populate customers
            _customers = await CustomerData.GetCustomersListForSearchBar(_searchTerm);

            // Populate vehicles
            _vehicles = await VehicleData.GetVehiclesListForSearchBar(_searchTerm);

            // Populate items
            _items = await StockData.GetStockListForSearchBar(_searchTerm);
        }
        else
        {
            _customers = null;
            _vehicles = null;
            _items = null;
        }
    }

    private void GoToVehicle(int vehicleId)
    {
        ManagerSession.SetLastPage(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/Vehicle/{vehicleId}");
        _customers = null;
        _vehicles = null;
        _items = null;
        _searchTerm = "";
    }

    private void GoToCustomer(int customerId)
    {
        ManagerSession.SetLastPage(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/Customer/{customerId}");
        _customers = null;
        _vehicles = null;
        _items = null;
        _searchTerm = "";
    }

    private void GoToItem(int itemId)
    {
        ManagerSession.SetLastPage(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/StockItem/{itemId}");
        _customers = null;
        _vehicles = null;
        _items = null;
        _searchTerm = "";
    }

    private void HandleOnBlur()
    {
        Thread.Sleep(100);
        _searchTerm = "";
        _customers = null;
        _vehicles = null;
        _items = null;
    }
}
