@using DataAccessLibrary.Data.Interfaces
@inject IAppointmentDataService AppointmentData
@inject IMessageDataService MessageData
@inject IStockDataService StockData
@inject IReportDataService ReportData
@inject IMechanicDataService MechanicData
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IManagerSessionData ManagerSession

<div class="row my-4">
	<hr/>
	<div class="col-md-6">
		<h2 class="text-center display-6">Today's Appointments</h2>
		
		<div class="overflow-y-auto" style="max-height: 600px;">
			@if (_todayAppointments != null)
			{
				@foreach (var a in _todayAppointments)
				{
					<div class="alert  mx-auto w-75 @(a.UserName == null ? "alert alert-danger" : a.Completed ? "alert alert-success" : "alert alert-warning")">
						@* <p>@a.ID</p> *@
						<p><b>Vehicle:</b> @a.NumberPlate - @a.Make @a.Model</p>
						@if (a.UserName != null && a.Completed == false)
						{
							<p><b>Assigned</b> to @a.UserName</p>
						}
						else if (a.UserName != null && a.Completed)
						{
							<p><b>Completed</b> by @a.UserName</p>
						}
						else
						{
							<p>Job <b>not assigned</b> to any mechanic!</p>
							<select class="form-select mx-auto w-50" @onfocusin="ResetAllDropDowns" @onchange="HandleDropDownChange">
								<option value="">Select Mechanic...</option>
								@foreach (var m in _mechanics)
								{
									<option value="@m.Id">@m.UserName</option>
								}
							</select>
							<div class="text-center mt-2">
								<button class="btn btn-primary" @onclick="(() => AssignJobCard(a.Id))">Assign</button>
							</div>
						}
						@if (a.Completed)
						{
							<div class="text-center">
								<button class="btn btn-primary" @onclick="(() => SeeReportFromAppointment(a.Id))">
									See Report
								</button>
							</div>
						}
						else if (a.Completed || a.UserName != null)
						{
							<p>Inspection <b>in progress</b>.</p>
						}
					</div>

				}
			}
			else
			{
				<p>No appointments for today!</p>
			}
		</div>
	</div>



	<div class="col-6">
		<h2 class="text-center  display-6">Unread Messages</h2>
		<div class="overflow-y-auto" style="max-height: 600px;">
					
			@if (_messages != null)
			{
				@foreach (var m in _messages)
				{
					<div class="alert alert-info mx-auto w-75">
						@* <p>Message ID: @m.ID</p> *@
						<p><b>@m.UserName</b> posted on <b>@m.PostedOn.ToString("g")</b> in <b>@m.Tag</b>:</p>
						<p><i>@m.Content</i></p>
						<div class="text-center">
							<button class="btn btn-primary" @onclick="(() => MarkMessageAsRead(m.Id))">Mark as read</button>	
						</div>
					</div>
				}
			}
			else
			{
				<p>No new messages!</p>
			}
		</div>
	</div>
</div>

<hr/>

<div class="row my-4">
	
	<div class="col-md-6">
		<h2 class="text-center display-6">Completed Inspections</h2>
		<div class="overflow-y-auto" style="max-height: 600px;">

			@if (_completedInspections != null)
			{
				@foreach (var c in _completedInspections)
				{
					<div class="alert alert-info mx-auto w-75">
						<p><b>Vehicle:</b> @c.NumberPlate - @c.Make @c.Model @c.Year</p>
						<p><b>Customer:</b> @c.FirstName @c.LastName</p>
						<p><b>Completed by:</b> @c.UserName on @c.TimeFinished.ToString("g")</p>
						<div class="text-center">
							<button class="btn btn-primary" @onclick="(() => SeeReport(c.Id))">See Report</button>
							<button class="btn btn-outline-danger" @onclick="(() => ArchiveInspection(c.Id))">Archive</button>
						</div>
					</div>
				}
			}
			else
			{
				<p>No completed inspections.</p>
			}
		</div>
	</div>

	<div class="col-md-6">
			<h2 class="text-center display-6">Stock Warnings</h2>	
		
		<div class="overflow-y-auto text-center" style="max-height: 600px;">

			<button class="btn btn-primary m-2" @onclick="(GoToInventory)">Go to Inventory</button>
			@if (_stock != null)
			{
				@foreach (var i in _stock)
				{
					@if (i.Quantity == 0)
					{
						<div class="alert alert-danger mx-auto w-75">
							<p><b>Alert!</b> Out of stock for: <b><i>@i.ItemName</i></b>!</p>
							<button class="btn btn-primary" @onclick="(() => GoToItem(i.Id))">Edit Item</button>
						</div>
					}
					else
					{
						<div class="alert alert-warning mx-auto w-75">
							<p><b>Warning:</b> Low stock for <b><i>@i.ItemName</i></b></p>
							<p>(Only <b>@(i.Unit.ToLower().Contains("piece") || i.Unit.ToLower().Contains("set") ? @i.Quantity.ToString("0") : @i.Quantity) @i.Unit left</b>)</p>
							<button class="btn btn-primary" @onclick="(() => GoToItem(i.Id))">Edit Item</button>
						</div>
					}
				}
			}
			else
			{
				<p>All good in the inventory!</p>
			}
		</div>
	</div>
</div>


<hr/>

<div class="container text-center">
  <div class="row">
		<div class="col">
			<VehiclesByMakeGraph></VehiclesByMakeGraph>
		</div>
		<div class="col">
			<MostCommonFaults></MostCommonFaults>
		</div>
	</div>
</div>

@code {
	private List<IMechanicBasicModel> _mechanics;
	private List<IDetailedAppointment> _todayAppointments;
	private List<IMessageModel> _messages;
	private List<IStockItemModel> _stock;
	private List<IDashboardReportModel> _completedInspections;
	private int _mechanicIdToAssign;

	protected override async Task OnInitializedAsync()
	{
		_todayAppointments = await AppointmentData.ReadTodayAppointmentsDetailed();
		_messages = await MessageData.ReadAllUnreadMessages();
		_stock = await StockData.ReadLowStockItems();
		_completedInspections = await ReportData.SearchAllReportsDashboard();
		_mechanics = await MechanicData.ReadAllMechanicsBasic();
	}

	private async void ResetAllDropDowns()
	{
		_mechanicIdToAssign = 0;
		await JSRuntime.InvokeAsync<object>("ResetAllDropDowns");
	}

	private void HandleDropDownChange(ChangeEventArgs e)
	{
		if (e.Value != null)
		{
			if (e.Value.ToString() == "")
			{
				_mechanicIdToAssign = 0;
			}
			else
			{
					_mechanicIdToAssign = int.Parse(e.Value.ToString()!);
			}
		}
	}

	private async void AssignJobCard(int appointmentId)
	{
		Console.WriteLine(appointmentId);
		Console.WriteLine(_mechanicIdToAssign);
		if (_mechanicIdToAssign > 0)
		{
			await AppointmentData.AssignJobCardById(appointmentId, _mechanicIdToAssign);
			var appointment = _todayAppointments.FirstOrDefault(x => x.Id == appointmentId);

			appointment!.MechanicId = _mechanicIdToAssign;

			appointment.UserName = _mechanics.FirstOrDefault(x => x.Id == _mechanicIdToAssign)!.UserName;

			await JSRuntime.InvokeAsync<object>("ResetAllDropDowns");

			StateHasChanged();
		}
	}

	private async void SeeReportFromAppointment(int appointmentId)
	{
		// Get inspection number by appointmentID
		int reportId = await ReportData.GetReportIdFromAppointmentIdAsync(appointmentId);
		// managerSession.SetLastPage("/");
		ManagerSession.SetLastPage(NavigationManager.Uri);
		// Redirect to inspection page
		NavigationManager.NavigateTo($"/Report/{reportId}");
	}

	private async Task MarkMessageAsRead(int messageId)
	{
		await MessageData.MarkMessageAsRead(messageId);

		_messages.Remove(_messages.Where(x => x.Id == messageId).FirstOrDefault());
	}

	private void GoToInventory()
	{
		ManagerSession.SetLastPage(NavigationManager.Uri);
		NavigationManager.NavigateTo("/Inventory");
	}	
	
	private void SeeReport(int reportId)
	{
		//managerSession.SetLastPage("/");
		ManagerSession.SetLastPage(NavigationManager.Uri);
		NavigationManager.NavigateTo($"/Report/{reportId}");
	}

	private async Task ArchiveInspection(int inspectionId)
	{
		await ReportData.ArchiveInspection(inspectionId);

		_completedInspections.Remove(_completedInspections.Where(x => x.Id == inspectionId).FirstOrDefault());
	}
	private void GoToItem(int itemId)
	{
		ManagerSession.SetLastPage(NavigationManager.Uri);
		NavigationManager.NavigateTo($"/StockItem/{itemId}");
	}
}
