@page "/ManageJobCards"
<PageTitle>Job Cards</PageTitle>
@attribute [Authorize(Roles = "Manager")]
@inject IJSRuntime JSRuntime
@inject IAppointmentDataService AppointmentData
@inject IMechanicDataService MechanicData

<h1 class="text-center display-3 fw-normal">Assign Job Cards</h1>

<hr/>

<div class="row justify-content-center">
	<div class="col-6">
		
		@if (_appointments == null)
		{
			<p>Loading appointments...</p>
		}
		else
		{
			@foreach (var a in _appointments)
			{
				<div class="alert @(a.MechanicID > 0 ? "alert-success" : "alert-warning")">
					
						@if (a.MechanicID > 0)
						{<p class="lead">
							<b>Appointment ID:</b> @a.ID<br />
							<b>Date:</b> @a.Date.ToShortDateString()<br />
							<b>Customer:</b> @a.FirstName @a.LastName<br />
							<b>Vehicle:</b> @a.NumberPlate - @a.Make @a.Model<br />
							<b>Assigned to:</b> @a.UserName</p>
						}
						else
						{<p class="lead">
							<b>Appointment ID:</b> @a.ID<br />
							<b>Date:</b> @a.Date.ToShortDateString()<br />
							<b>Customer:</b> @a.FirstName @a.LastName<br />
							<b>Vehicle:</b> @a.NumberPlate - @a.Make @a.Model<br />
							<b>No Mechanic Assigned.</b></p>
						}
					
					
					<select class="form-select mx-auto w-50" @onfocusin="ResetAllDropDowns" @onchange="HandleDropDownChange">
						<option value="">Select Mechanic...</option>
						@foreach (var m in _mechanics)
						{
							<option value="@m.ID">@m.UserName</option>
						}
					</select>

						<div class="text-center mt-2">
						<button class="btn btn-outline-primary" @onclick="(() => AssignJobCard(a.ID))">Assign</button>

					@if (_idToDelete == a.ID)
					{
						<button class="btn btn-danger" @onclick="(() => DeleteAppointment(a.ID))">
							Confirm
						</button>
					}
					else
					{
						<button class="btn btn-outline-danger mx-2" @onclick="(() => _idToDelete = a.ID)">
							Delete
						</button>
					}
					</div>
				</div>

			}
		}

	</div>
</div>

@code {
	private List<IDetailedAppointment> _appointments;
	private List<IMechanicBasicModel> _mechanics;
	private int _idToDelete;
	private int _mechanicIDToAssign;

	protected override async Task OnInitializedAsync()
	{
		_appointments = await AppointmentData.ReadAllAppointmentsDetailed();
		_mechanics = await MechanicData.ReadAllMechanicsBasic();
	}

	private async void ResetAllDropDowns()
	{
		_mechanicIDToAssign = 0;
		await JSRuntime.InvokeAsync<object>("ResetAllDropDowns");
	}

	private void HandleDropDownChange(ChangeEventArgs e)
	{
		if (e.Value!.ToString() == "")
		{
			_mechanicIDToAssign = 0;
		}
		else
		{
			_mechanicIDToAssign = int.Parse(e.Value.ToString()!);
		}
	}

	private async void AssignJobCard(int appointmentId)
	{
		Console.WriteLine(appointmentId);
		Console.WriteLine(_mechanicIDToAssign);
		if (_mechanicIDToAssign > 0)
		{
			await AppointmentData.AssignJobCardByID(appointmentId, _mechanicIDToAssign);
			var appointment = _appointments.FirstOrDefault(x => x.ID == appointmentId);

			appointment!.MechanicID = _mechanicIDToAssign;
			appointment.UserName = _mechanics.FirstOrDefault(x => x.ID == _mechanicIDToAssign)!.UserName;

			await JSRuntime.InvokeAsync<object>("ResetAllDropDowns");
			_idToDelete = 0;
			StateHasChanged();
		}
	}

	private async void DeleteAppointment(int id)
	{
		await AppointmentData.DeleteAppointmentByID(id);
		_appointments.Remove(_appointments.Where(x => x.ID == id).FirstOrDefault());
		_idToDelete = 0;
		StateHasChanged();
	}
}
